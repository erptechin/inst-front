{"version":3,"file":"static/js/995.522324c0.chunk.js","mappings":"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","sources":["components/Breadcrumbs/index.tsx","contexts/useFetchSingle.tsx","contexts/usePatch.tsx","contexts/usePost.tsx","screens/dashboards/smtp_servers/addEdit.tsx"],"sourcesContent":["import { NavLink } from \"react-router-dom\";\ninterface BreadcrumbProps {\n  pageName: string;\n  root: string;\n}\nconst Breadcrumbs = ({ root, pageName }: BreadcrumbProps) => {\n  return (\n    <div className=\"main-content-header\">\n      <div className=\"card\">\n        <div className=\"card-body no-padding\">\n          <ol className=\"breadcrumb ltn no-radius\">\n            <li className=\"text-normal\"><NavLink to=\"/dashboard\">Main Dashboard</NavLink></li>\n            {root && (<li className=\"text-normal\"><NavLink to={`/${root}`}>{root}</NavLink></li>)}\n            <li className=\"active text-lg\">{pageName}</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Breadcrumbs;\n","import { useContext, useState, useEffect } from 'react';\nimport apis from \"./apis\";\nimport { MainContext } from \"../contexts/mainProvider\";\n\nexport function useFetchSingle() {\n    const { token } = useContext(MainContext)\n    const [data, setData] = useState<any>(null);\n    const [loading, setLoading] = useState(false);\n    const fetchSingle = async (resource: any, id: any) => {\n        try {\n            setLoading(true);\n            setData(null);\n            const response: any = await apis.getSingleDataApi({ url: resource, id }, token);\n            if (response) {\n                setData(response);\n            }\n            setLoading(false);\n        } catch (error) {\n            setLoading(false);\n        }\n    };\n    return { fetchSingle, data, loading };\n}","import { useContext, useState } from 'react';\nimport apis from \"./apis\";\nimport { MainContext } from \"../contexts/mainProvider\";\n\nexport function usePatch() {\n    const { token } = useContext(MainContext)\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const edit = async (resource: string, body: object) => {\n        try {\n            setLoading(true);\n            const response: any = await apis.editDataApi({ url:resource, body }, token);\n            if (response) {\n                setData(response);\n            }\n            setLoading(false);\n        } catch (error) {\n            setLoading(false);\n        }\n    };\n    return { edit, data, loading };\n}","import { useContext, useState } from 'react';\nimport apis from \"./apis\";\nimport { MainContext } from \"../contexts/mainProvider\";\n\nexport function usePost() {\n    const { token } = useContext(MainContext)\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const create = async (resource: string, body: object) => {\n        try {\n            setLoading(true);\n            const response: any = await apis.addDataApi({ url: resource, body }, token);\n            if (response) {\n                setData(response);\n            }\n            setLoading(false);\n        } catch (error) {\n            setLoading(false);\n        }\n    };\n    return { create, data, loading };\n}","import { useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { InputBox, Buttons, SelectBox } from \"../../../components/RenderFroms\";\nimport { useFetchSingle } from \"../../../contexts/useFetchSingle\";\nimport { usePost } from \"../../../contexts/usePost\";\nimport { usePatch } from \"../../../contexts/usePatch\";\nimport Breadcrumbs from \"../../../components/Breadcrumbs\";\nimport ListTitle from \"../../../components/ListTitle\";\nconst resource = \"system_smtp_servers\";\n\nconst defaultValue = {\n\tsystemSmtpServerName: \"\",\n\tsystemSmtpServerHost: \"\",\n\tsystemSmtpServerPort: \"\",\n\tsystemSmtpServerEncryption: \"\",\n\tsystemSmtpServerBounceReturnPathEmailId: \"\",\n\tsystemSmtpServerUseAuthentication: \"\"\n}\n\nexport default function AddSmtpServers() {\n\tconst navigate = useNavigate();\n\tconst { id } = useParams();\n\n\tconst validationSchemaInfo = Yup.object().shape({\n\t\tsystemSmtpServerName: Yup.string().required(\"Server Name is required\"),\n\t\tsystemSmtpServerHost: Yup.string().required(\"This is required\"),\n\t\tsystemSmtpServerPort: Yup.number().required(\"This is required\"),\n\t\tsystemSmtpServerEncryption: Yup.string().required(\"This is required\"),\n\t\tsystemSmtpServerUseAuthentication: Yup.string().required(\"This is required\"),\n\t\tsystemSmtpServerBounceReturnPathEmailId: Yup.string()\n\t\t\t.email(\"Invalid email address\")\n\t\t\t.required(\"Email is Required\"),\n\n\t});\n\n\tconst { fetchSingle, data: users, loading: loadingData } = useFetchSingle();\n\tuseEffect(() => {\n\t\tfetchSingle(resource, id)\n\t}, [id])\n\n\tconst { create, data: respond, loading } = usePost();\n\tconst { edit, data: respond1, loading: loading1 } = usePatch();\n\tconst handleUpdate = (values: any) => {\n\t\tif (id) {\n\t\t\tedit(resource, values)\n\t\t} else {\n\t\t\tcreate(resource, values)\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tif ((respond as any)?.status == 201) {\n\t\t\tnavigate(-1)\n\t\t}\n\t\tif ((respond1 as any)?.status == 200) {\n\t\t\tnavigate(-1)\n\t\t}\n\t}, [respond, respond1])\n\n\tconst encryptOptions = [{ label: 'None', value: 'none' }, { label: 'SSL', value: 'ssl' }, { label: 'TLS', value: 'tls' }]\n\tconst authOptions = [{ label: 'Yes, Authenticate Using Login Credentials', value: 'Yes' }, { label: 'No, Do Not Authenticate Using Login Credentials', value: 'No' }]\n\n\tif (loadingData) {\n\t\treturn <>loading</>\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Breadcrumbs root=\"smtp-servers\" pageName=\"Add SMTP Server\" />\n\t\t\t<div className=\"main-content-body\">\n\t\t\t\t<div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"card\">\n\n\t\t\t\t\t\t\t<ListTitle ListName={`${id ? 'Edit' : 'Add'} SMTP Server (All fields are mandatory).`} />\n\n\t\t\t\t\t\t\t<div className=\"form-horizontal has-validation-callback\">\n\t\t\t\t\t\t\t\t<Formik\n\t\t\t\t\t\t\t\t\tinitialValues={users ? users : defaultValue}\n\t\t\t\t\t\t\t\t\tvalidationSchema={validationSchemaInfo}\n\t\t\t\t\t\t\t\t\tonSubmit={(values: any) => handleUpdate(values)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{({ handleChange, handleBlur, handleSubmit, values, errors }) => (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"card-body\">\n\n\t\t\t\t\t\t\t\t\t\t\t\t<InputBox\n\t\t\t\t\t\t\t\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"systemSmtpServerName\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tlable=\"SMTP Server Name\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t\t\t\t<InputBox\n\t\t\t\t\t\t\t\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"systemSmtpServerHost\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tlable=\"SMTP Server Host\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t\t\t\t<InputBox\n\t\t\t\t\t\t\t\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\tType=\"number\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"systemSmtpServerPort\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tlable=\"SMTP Server Port No\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t\t\t\t<SelectBox\n\t\t\t\t\t\t\t\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\toptions={encryptOptions}\n\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"systemSmtpServerEncryption\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tlable=\"SMTP Server Encryption Method\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select Type\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t\t\t\t<SelectBox\n\t\t\t\t\t\t\t\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\toptions={authOptions}\n\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"systemSmtpServerUseAuthentication\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tlable=\">SMTP Server Use Authentication?\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t\t\t\t<InputBox\n\t\t\t\t\t\t\t\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"systemSmtpServerBounceReturnPathEmailId\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tlable=\"SMTP Server Bounce Email ID\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"clear\"></div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"card-action\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<label className=\"col-lg-4 col-md-4 col-sm-12 col-xs-12 control-label\">&nbsp;</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Buttons loading={loading || loading1} className=\"btn-success\" value=\"Save SMTP Server\" onClick={() => handleSubmit()} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Buttons className=\"btn-grey\" value=\"Go Back to List\" onClick={() => navigate(-1)} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"clear\"></div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</>)}\n\t\t\t\t\t\t\t\t</Formik>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\n\n"],"names":["_ref","root","pageName","_jsx","className","children","_jsxs","NavLink","to","concat","useFetchSingle","token","useContext","MainContext","data","setData","useState","loading","setLoading","fetchSingle","async","resource","id","response","apis","getSingleDataApi","url","error","usePatch","edit","body","editDataApi","usePost","create","addDataApi","defaultValue","systemSmtpServerName","systemSmtpServerHost","systemSmtpServerPort","systemSmtpServerEncryption","systemSmtpServerBounceReturnPathEmailId","systemSmtpServerUseAuthentication","AddSmtpServers","navigate","useNavigate","useParams","validationSchemaInfo","Yup","shape","required","email","users","loadingData","useEffect","respond","respond1","loading1","status","encryptOptions","label","value","authOptions","_Fragment","Breadcrumbs","ListTitle","ListName","Formik","initialValues","validationSchema","onSubmit","values","handleUpdate","handleChange","handleBlur","handleSubmit","errors","InputBox","name","lable","placeholder","Type","SelectBox","options","Buttons","onClick"],"sourceRoot":""}